// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt        @id @default(autoincrement())
  name         String        @db.VarChar(100)
  nickname     String        @db.VarChar(100)
  email        String        @unique(map: "email") @db.VarChar(50)
  password     String        @db.VarChar(100)
  profileImage String        @map("profile_image") @db.VarChar(1000)
  status       String        @db.VarChar(100)
  socialType   String        @map("social_type") @db.VarChar(100)
  inactiveDate DateTime      @map("inactive_date") @db.DateTime(6)
  createdAt    DateTime?     @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt    DateTime?     @default(now()) @map("updated_at") @db.DateTime(6)
  UserGenres   UserGenre[]
  UserArtists  UserArtist[]
  TimeHistorys TimeHistory[]
  Librarys     Library[]
  UserMusics   UserMusic[]

  @@map("user")
}

model TimeHistory {
  id        BigInt    @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    BigInt    @map("user_id")
  history   DateTime  @db.DateTime(6)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)

  @@index([userId], map: "user_id")
  @@map("time_history")
}

model Artist {
  id             BigInt          @id @default(autoincrement())
  name           String          @db.VarChar(100)
  image          String          @db.VarChar(1000)
  createdAt      DateTime?       @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt      DateTime?       @default(now()) @map("updated_at") @db.DateTime(6)
  UserArtists    UserArtist[]
  MusicArtist    MusicArtist[]
  LibraryArtists LibraryArtist[]

  @@map("artist")
}

model Genre {
  id         BigInt       @id @default(autoincrement())
  name       String       @db.VarChar(100)
  image      String       @db.VarChar(1000)
  createdAt  DateTime?    @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt  DateTime?    @default(now()) @map("updated_at") @db.DateTime(6)
  UserGenres UserGenre[]
  MusicGenre MusicGenre[]

  @@map("genre")
}

model UserGenre {
  id        BigInt    @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    BigInt    @map("user_id")
  genre     Genre     @relation(fields: [genreId], references: [id])
  genreId   BigInt    @map("genre_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)

  @@index([genreId], map: "genre_id")
  @@index([userId], map: "user_id")
  @@map("user_genre")
}

model UserArtist {
  id        BigInt    @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    BigInt    @map("user_id")
  artist    Artist    @relation(fields: [artistId], references: [id])
  artistId  BigInt    @map("artist_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)

  @@index([artistId], map: "artist_id")
  @@index([userId], map: "user_id")
  @@map("user_artist")
}

model Album {
  id            BigInt         @id @default(autoincrement())
  title         String         @db.VarChar(100)
  description   String         @db.Text
  releaseTime   DateTime       @map("release_time") @db.DateTime(6)
  image         String         @db.VarChar(1000)
  createdAt     DateTime?      @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt     DateTime?      @default(now()) @map("updated_at") @db.DateTime(6)
  Musics        Music[]
  LibraryAlbums LibraryAlbum[]

  @@map("album")
}

model Music {
  id            BigInt         @id @default(autoincrement())
  album         Album          @relation(fields: [albumId], references: [id])
  albumId       BigInt         @map("album_id")
  title         String         @db.VarChar(100)
  releaseTime   DateTime       @map("release_time") @db.DateTime(6)
  lyrics        String         @db.Text
  image         String         @db.VarChar(1000)
  createdAt     DateTime?      @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt     DateTime?      @default(now()) @map("updated_at") @db.DateTime(6)
  MusicGenres   MusicGenre[]
  MusicArtists  MusicArtist[]
  LibraryMusics LibraryMusic[]
  UserMusics    UserMusic[]

  @@index([albumId], map: "album_id")
  @@map("music")
}

model MusicGenre {
  id        BigInt    @id @default(autoincrement())
  music     Music     @relation(fields: [musicId], references: [id])
  musicId   BigInt    @map("music_id")
  genre     Genre     @relation(fields: [genreId], references: [id])
  genreId   BigInt    @map("genre_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)

  @@index([genreId], map: "genre_id")
  @@index([musicId], map: "music_id")
  @@map("music_genre")
}

model MusicArtist {
  id        BigInt    @id @default(autoincrement())
  music     Music     @relation(fields: [musicId], references: [id])
  musicId   BigInt    @map("music_id")
  artist    Artist    @relation(fields: [artistId], references: [id])
  artistId  BigInt    @map("artist_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.DateTime(6)

  @@index([artistId], map: "artist_id")
  @@index([musicId], map: "music_id")
  @@map("music_artist")
}

model Library {
  id             BigInt          @id @default(autoincrement())
  user           User            @relation(fields: [userId], references: [id])
  userId         BigInt          @map("user_id")
  createdAt      DateTime?       @default(now()) @map("created_at") @db.DateTime(6)
  updatedAt      DateTime?       @default(now()) @map("updated_at") @db.DateTime(6)
  LibraryArtists LibraryArtist[]
  LibraryAlbums  LibraryAlbum[]
  LibraryMusics  LibraryMusic[]

  @@index([userId], map: "user_id")
  @@map("library")
}

model LibraryAlbum {
  id        BigInt  @id @default(autoincrement())
  library   Library @relation(fields: [libraryId], references: [id])
  libraryId BigInt  @map("library_id")
  album     Album   @relation(fields: [albumId], references: [id])
  albumId   BigInt  @map("album_id")

  @@index([albumId], map: "album_id")
  @@index([libraryId], map: "library_id")
  @@map("library_album")
}

model LibraryMusic {
  id        BigInt  @id @default(autoincrement())
  library   Library @relation(fields: [libraryId], references: [id])
  libraryId BigInt  @map("library_id")
  music     Music   @relation(fields: [musicId], references: [id])
  musicId   BigInt  @map("music_id")

  @@index([musicId], map: "music_id")
  @@index([libraryId], map: "library_id")
  @@map("library_music")
}

model LibraryArtist {
  id        BigInt  @id @default(autoincrement())
  library   Library @relation(fields: [libraryId], references: [id])
  libraryId BigInt  @map("library_id")
  artist    Artist  @relation(fields: [artistId], references: [id])
  artistId  BigInt  @map("artist_id")

  @@index([artistId], map: "artist_id")
  @@index([libraryId], map: "library_id")
  @@map("library_artist")
}

model UserMusic {
  id      BigInt @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  BigInt @map("user_id")
  music   Music  @relation(fields: [musicId], references: [id])
  musicId BigInt @map("music_id")

  @@index([userId], map: "user_id")
  @@index([musicId], map: "music_id")
  @@map("user_music")
}
